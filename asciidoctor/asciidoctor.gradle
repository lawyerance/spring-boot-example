buildscript {

    ext {
        asciidoctorVersion = "1.5.9.2"
    }
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$springBootVersion"
        classpath "io.spring.gradle:dependency-management-plugin:$springDependencyVersion"
        classpath "org.asciidoctor:asciidoctor-gradle-plugin:$asciidoctorVersion"
        classpath "io.github.swagger2markup:swagger2markup-gradle-plugin:$swagger2markupVersion"
        classpath "io.github.swagger2markup:swagger2markup:$swagger2markupVersion"
        classpath "io.github.swagger2markup:swagger2markup-import-files-ext:1.3.1"
        classpath "com.bluepapa32:gradle-watch-plugin:0.1.5"
        classpath "org.kordamp.gradle:livereload-gradle-plugin:0.2.1"
    }
}

subprojects {
    group "$group"
    version "$version"


    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    ext {
        swaggerOutputDir = file("build/swagger")
        asciiDocOutputDir = file("build/asciidoc/generated")
        snippetsOutputDir = file("build/asciidoc/snippets")
    }


    repositories {
        mavenLocal()
        maven { url 'http://repo.spring.io/plugins-release/' }
        mavenCentral()
    }

    dependencies {
        implementation libraries.swagger2

        implementation libraries.snakeyaml

        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }
}

configure(subprojects.findAll { it.name.endsWith('swagger') }) {
    println('current project ----> ' + project.name)

    apply plugin: 'org.asciidoctor.convert'
    apply plugin: 'io.github.swagger2markup'

    ext {
        swaggerOutputDir = file("build/swagger")
        asciiDocOutputDir = file("build/asciidoc/generated")
        snippetsOutputDir = file("build/asciidoc/snippets")
    }


    repositories {
        mavenLocal()
        maven { url 'http://repo.spring.io/plugins-release/' }
        mavenCentral()
    }

    dependencies {

        asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestdocsVersion"

        asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'

    }


    test {
        systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
        systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
    }

    convertSwagger2markup {
        dependsOn test

        swaggerInput "${swaggerOutputDir}/swagger.json"
        outputDir asciiDocOutputDir
        config = ['swagger2markup.markupLanguage': 'ASCIIDOC',
                  'swagger2markup.pathsGroupedBy': 'TAGS']
    }

    asciidoctorj {
        version = '1.5.5'
    }

    asciidoctor {
        dependsOn convertSwagger2markup
        sourceDir(file("${projectDir}/docs/asciidoc/"))
        sources {
            include 'index.adoc'
        }
        backends = ['html5', 'pdf']
        attributes = [
                doctype    : 'book',
                toc        : 'left',
                toclevels  : '3',
                numbered   : '',
                sectlinks  : '',
                sectanchors: '',
                hardbreaks : '',
                generated  : asciiDocOutputDir
        ]
    }

    jar {

        archiveBaseName = "spring-example"
        dependsOn asciidoctor

        from("${asciidoctor.outputDir}/html5") {
            into 'META-INF/resources/docs'
        }
        from("${asciidoctor.outputDir}/pdf") {
            into 'META-INF/resources/docs'
        }

    }

    bootJar {
        archiveFileName = project.name + ".jar"
        archiveClassifier = 'boot'
        excludes = ["*.jar"]
        includes = ["**/*.class", "MANIFEST.MF"]

        from("${asciidoctor.outputDir}/html5") {
            into 'META-INF/resources/docs'
        }

        manifest {
            attributes "Manifest-Version": 1.0,
                    'Class-Path': 'config/'
        }
    }

    task distribution(type: Zip) {
        boolean includeArchiveDirectory = (project.hasProperty('includeArchive') ? Boolean.valueOf(project.findProperty('includeArchive').toString()) : false)
        archiveFileName = "${project.name}-${project.version}-release.zip"
        destinationDirectory = file("${buildDir}/release")
        println("The distribution package whether contains archive name with value: ${includeArchiveDirectory}")
        if (includeArchiveDirectory) {
            into("${project.name}") {
                from("${buildDir}/libs")
            }
        } else {
            from("${buildDir}/libs")
        }
    }


    task copyRelease(type: Copy) {
        destinationDir = file("${buildDir}/libs")

        into('lib') {
            from configurations.compileClasspath
        }

        into('config') {
            from("${buildDir}/resources/main") {
                include '**/**.*'
            }
        }

        into('bin') {
            from("scripts")
        }
    }

    distribution.dependsOn build, copyRelease
}
