plugins {
    id 'java'
}
apply plugin: 'org.asciidoctor.convert'
apply plugin: 'io.github.swagger2markup'

group 'pers.lyks.spring.boot'
version '1.0.0-SNAPSHOT'

sourceCompatibility = 1.8



ext {
    swaggerOutputDir = file("build/swagger")
    asciiDocOutputDir = file("build/asciidoc/generated")
    snippetsOutputDir = file("build/asciidoc/snippets")
}


repositories {
    mavenLocal()
    maven { url 'http://repo.spring.io/plugins-release/' }
    mavenCentral()
}

dependencies {

    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    asciidoctor "org.springframework.restdocs:spring-restdocs-asciidoctor:$springRestdocsVersion"

    asciidoctor 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.15'
}


test {
    systemProperty 'io.springfox.staticdocs.outputDir', swaggerOutputDir
    systemProperty 'io.springfox.staticdocs.snippetsOutputDir', snippetsOutputDir
}

convertSwagger2markup {
    dependsOn test
    swaggerInput "${swaggerOutputDir}/swagger.json"
    outputDir asciiDocOutputDir
    config = ['swagger2markup.markupLanguage': 'ASCIIDOC',
              'swagger2markup.pathsGroupedBy': 'TAGS']
}

asciidoctorj {
    version = '1.5.5'
}

asciidoctor {
    dependsOn convertSwagger2markup
    sources {
        include 'index.adoc'
    }
    backends = ['html5', 'pdf']
    attributes = [
            doctype    : 'book',
            toc        : 'left',
            toclevels  : '3',
            numbered   : '',
            sectlinks  : '',
            sectanchors: '',
            hardbreaks : '',
            generated  : asciiDocOutputDir
    ]
}

jar {

    archiveBaseName = "spring-example"
    dependsOn asciidoctor

    from("${asciidoctor.outputDir}/html5") {
        into 'META-INF/resources/docs'
    }
    from("${asciidoctor.outputDir}/pdf") {
        into 'META-INF/resources/docs'
    }

}

bootJar {
    archiveFileName = project.name + ".jar"
    classifier = 'boot'
    excludes = ["*.jar"]
    includes = ["**/*.class", "MANIFEST.MF"]

    from("${asciidoctor.outputDir}/html5") {
        into 'META-INF/resources/docs'
    }
    from("${asciidoctor.outputDir}/pdf") {
        into 'META-INF/resources/docs'
    }

    manifest {
        attributes "Manifest-Version": 1.0,
                'Class-Path': 'config/'
    }
}

task packageDistribution(type: Zip) {
    dependsOn 'build'
    boolean includeArchiveDirectory = true
    archiveFileName = "${project.name}-${project.version}-release.zip"
    destinationDirectory = file("${buildDir}/release")

    if (includeArchiveDirectory) {
        String catalog = project.name
        into("${catalog}") {
            from("${buildDir}/libs") {
                include "*.jar"
            }
        }

        into("${catalog}/lib") {
            from configurations.compileClasspath
        }

        into("${catalog}/config") {
            from("${buildDir}/resources/main") {
                include '**/**.*'
            }
        }
        into("${catalog}/bin") {
            from("scripts")
        }
    } else {
        from("${buildDir}/libs") {
            include "*.jar"
        }

        into('lib') {
            from configurations.compileClasspath
        }

        into('config') {
            from("${buildDir}/resources/main") {
                include '**/**.*'
            }
        }
        into('bin') {
            from("scripts")
        }
    }


}
